// Generated by gencpp from file robotinterfaces/Armor.msg
// DO NOT EDIT!


#ifndef ROBOTINTERFACES_MESSAGE_ARMOR_H
#define ROBOTINTERFACES_MESSAGE_ARMOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace robotinterfaces
{
template <class ContainerAllocator>
struct Armor_
{
  typedef Armor_<ContainerAllocator> Type;

  Armor_()
    : number()
    , type()
    , distance_to_image_center(0.0)
    , pose()  {
    }
  Armor_(const ContainerAllocator& _alloc)
    : number(_alloc)
    , type(_alloc)
    , distance_to_image_center(0.0)
    , pose(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _number_type;
  _number_type number;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_type;
  _type_type type;

   typedef float _distance_to_image_center_type;
  _distance_to_image_center_type distance_to_image_center;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;





  typedef boost::shared_ptr< ::robotinterfaces::Armor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotinterfaces::Armor_<ContainerAllocator> const> ConstPtr;

}; // struct Armor_

typedef ::robotinterfaces::Armor_<std::allocator<void> > Armor;

typedef boost::shared_ptr< ::robotinterfaces::Armor > ArmorPtr;
typedef boost::shared_ptr< ::robotinterfaces::Armor const> ArmorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotinterfaces::Armor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotinterfaces::Armor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotinterfaces::Armor_<ContainerAllocator1> & lhs, const ::robotinterfaces::Armor_<ContainerAllocator2> & rhs)
{
  return lhs.number == rhs.number &&
    lhs.type == rhs.type &&
    lhs.distance_to_image_center == rhs.distance_to_image_center &&
    lhs.pose == rhs.pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotinterfaces::Armor_<ContainerAllocator1> & lhs, const ::robotinterfaces::Armor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotinterfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robotinterfaces::Armor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotinterfaces::Armor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotinterfaces::Armor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotinterfaces::Armor_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotinterfaces::Armor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotinterfaces::Armor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotinterfaces::Armor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b1510e3aae8707ed5d8323805f976d4c";
  }

  static const char* value(const ::robotinterfaces::Armor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb1510e3aae8707edULL;
  static const uint64_t static_value2 = 0x5d8323805f976d4cULL;
};

template<class ContainerAllocator>
struct DataType< ::robotinterfaces::Armor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotinterfaces/Armor";
  }

  static const char* value(const ::robotinterfaces::Armor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotinterfaces::Armor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string number\n"
"string type\n"
"float32 distance_to_image_center\n"
"geometry_msgs/Pose pose\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::robotinterfaces::Armor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotinterfaces::Armor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.number);
      stream.next(m.type);
      stream.next(m.distance_to_image_center);
      stream.next(m.pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Armor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotinterfaces::Armor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotinterfaces::Armor_<ContainerAllocator>& v)
  {
    s << indent << "number: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.number);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type);
    s << indent << "distance_to_image_center: ";
    Printer<float>::stream(s, indent + "  ", v.distance_to_image_center);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTINTERFACES_MESSAGE_ARMOR_H
